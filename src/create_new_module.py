import os
import sys

def write_function_declaration(virtual_method, module_name):
    virtual_method = virtual_method.strip()
    idx = virtual_method.index('(')
    a = virtual_method[0:idx]
    idx = a.index(' ')
    b = virtual_method[0:idx] + " " + module_name.capitalize() + "Module::" + virtual_method[idx+1:-1]
    return b

def write_module(module_filename, base_module_header_filename):
    module_name = os.path.basename(module_filename)
    f_nmh = open(module_filename + "_module.h", "w")
    f_nmc = open(module_filename + "_module.cc", "w")

    # TOP OF HEADER FILE
    # write header guard
    f_nmh.write("#ifndef " + module_name.upper() + "_MODULE_H\n")
    f_nmh.write("#define " + module_name.upper() + "_MODULE_H\n\n")

    # include base_module.h
    f_nmh.write("""#include "src/base_module.h"\n\n""")

    # write module data type
    f_nmh.write("class " + module_name.capitalize() + "ModuleData {\n\n};\n\n")

    # leave comment indicating this was auto generated
    f_nmh.write("// The outline for this file was autogenerated\n")

    # request user to document purpose of this module
    f_nmh.write("/* Please provide Module Documentation here\n\n*/\n")

    # TOP OF CC FILE
    # include module header
    f_nmc.write('#include "' + module_name + """_module.h"\n\n""")
    # leave a comment indicating this was auto generated
    f_nmc.write("// The outline for this file was autogenerated by create_new_module.py\n\n")


    # start writing class
    f_nmh.write("class " + module_name.capitalize() + "Module : public BaseModule {\n")
    f_bm = open(base_module_header_filename, "r")
    public_flag = False
    protected_or_private_flag = False
    constructor_flag = True
    module_data_flag = True
    for x in f_bm:
        if "public:" in x:
            f_nmh.write(x + "\n")
            public_flag = True
        if "private:" in x:
            f_nmh.write(x + "\n")
            protected_or_private_flag = True
        if "protected:" in x:
            f_nmh.write(x + "\n")
            protected_or_private_flag = True

        if public_flag and constructor_flag:
            f_nmh.write("\t\t" + module_name.capitalize() + "Module();\n")
            f_nmc.write(module_name.capitalize() + "Module::" + module_name.capitalize() + "Module() {\n")
            f_nmc.write('\t_module_name = "' + module_name.capitalize() + ' Module";\n')
            f_nmc.write("}\n\n")
            constructor_flag = False
        if protected_or_private_flag and module_data_flag:
            f_nmh.write("\t\t" + module_name.capitalize() + "ModuleData _" + module_name + "_data;\n")
            protected_or_private_flag = False

        if "virtual" in x:
            virtual_method = x
            virtual_method = virtual_method.replace("virtual ", "", 1)
            override_method = virtual_method.replace(";", " override;", 1)
            f_nmh.write(override_method + "\n")
            f_nmc.write(write_function_declaration(virtual_method, module_name) + " {\n\n")
            f_nmc.write("}\n\n")

    f_nmh.write("};\n\n")

    # end header guard
    f_nmh.write("#endif")

    f_bm.close()
    f_nmh.close()

if __name__ == "__main__":
    module_name = sys.argv[1]
    ws = os.path.dirname(__file__)
    write_module(module_name, os.path.join(ws, "base_module.h"))